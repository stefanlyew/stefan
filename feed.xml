<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog/</id>
  <link href="http://blog.url.com/blog/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-05-23T07:18:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Fuzzy jQuery</title>
    <link rel="alternate" href="http://blog.url.com/blog/fuzzy-jquery.html"/>
    <id>http://blog.url.com/blog/fuzzy-jquery.html</id>
    <published>2014-05-23T07:18:00Z</published>
    <updated>2015-07-13T10:03:19-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="fuzzy-jquery"&gt;Fuzzy jQuery&lt;/h1&gt;

&lt;h2 id="using-jquerys-built-in-regex-style-operations-for-fuzzy-matching"&gt;Using jQuery’s built-in regex style operations for fuzzy matching.&lt;/h2&gt;

&lt;p&gt;I’m working on a web scraper that grabs information from product pages on popular retail sites. Typically, these sites use the same attribute names (like colorChoice or sizeChoice) for every product. This means one jQuery selector can pull all the data I need for every product on the site. Easy enough, right?&lt;/p&gt;

&lt;p&gt;So, a few days ago, I loaded a JCrew product page, popped open the inspector and started searching. As I dug deeper, I noticed something weird…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All the id attributes on the page had different names.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I checked other JCrew pages. The attributes were unique for EVERY. SINGLE. PRODUCT. on the site! It looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="images/6/product-info-934714a4.png" /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I wanted the web scraper to extract the colorChoice for each product on the site, but the unique id names would require thousands of different jQuery selectors. How the heck am I supposed to select by id if the attributes keep changing all the time?!&lt;/p&gt;

&lt;p&gt;After grappling with the problem for a few hours, I started researching. And researching. Finally, I learned something cool – &lt;strong&gt;jQuery can do fuzzy matches against partial, inexact and incomplete attributes.&lt;/strong&gt; Sanity saved!&lt;/p&gt;

&lt;p&gt;jQuery can do this with a few built-in regex-style operations. They look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name^=”value”&lt;/strong&gt; (Attribute starts with a “value”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name$=”value”&lt;/strong&gt; (Attribute ends with a “value”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name*=”value”&lt;/strong&gt; (Attribute contains a “value”)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name!=”value”&lt;/strong&gt; (Attribute does not equal a “value”)&lt;/p&gt;

&lt;p&gt;Because ids and classes are simple attributes, you can apply a regex attribute filter on the HTML above to get something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('span[id^=colorChoice_]')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will return the attribute starting with colorChoice, like this…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span id="​"colorChoice_258740_432121""&amp;gt;​Classic Navy Blue​&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will match every time for different products across the site, even when you don’t know the exact id name. Using fuzzy jQuery matching is a simple but powerful solution that will save you a ton of headaches. I know it did for me.&lt;/p&gt;

&lt;p&gt;Keep in mind you’ll want to be as specific as possible. Otherwise, your jQuery will evaluate every div or span with a matching attribute, which I don’t recommend because your performance would suck.&lt;/p&gt;

&lt;p&gt;Now that I have this trick in my jQuery toolbelt, I find myself reaching for it all the time – especially when I write scripts to evaluate data on web pages. I hope it helps you too!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Resources to Level-up to Intermediate Rails Developer</title>
    <link rel="alternate" href="http://blog.url.com/blog/intermediate-ruby-resources.html"/>
    <id>http://blog.url.com/blog/intermediate-ruby-resources.html</id>
    <published>2013-12-03T07:18:00Z</published>
    <updated>2013-12-03T02:39:33-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="resources-to-level-up-to-intermediate-rails-developer"&gt;Resources to Level-up to Intermediate Rails Developer&lt;/h1&gt;

&lt;h2 id="so-youve-read-the-books-done-the-tutorials-and-written-your-own-rails-applications--whats-next--use-these-resources-to-help-you-along-the-way-and-to-further-immerse-yourself-in-the-craft-of-ruby-web-development"&gt;So you’ve read the books, done the tutorials and written your own Rails applications.  What’s next?  Use these Resources to help you along the way, and to further immerse yourself in the craft of ruby web development.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“I hear and I forget. I see and I remember. I do and I understand.”
–Confucius&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://everydayrails.com/2010/07/05/intermediate-rails-steps.html"&gt;First: Read this post by Aaron Sumner&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="screencasts"&gt;Screencasts&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://pluralsight.com/training/Courses"&gt;Pluralsight&lt;/a&gt; (PeepCode/TekPub).  PluralSight acquired PeepCode and TekPub which produce excellent premium screencasts on a huge variety of modern web development topics.  The upside is that getting unlimited access to both for $29 a month is a huge bargain, along with a huge library of other courses.  The downsides are that now you can’t download the videos and the streaming video buffering speed is kind of slow.  At the end of this article I’ll show you how college students can get a free 3-month subscription.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://railscasts.com/"&gt;Railscasts&lt;/a&gt; by Ryan Bates.  Railscasts give you a broad overview of the tools in the Rails universe.  Each screencast gives you a brief introduction to a specific concept or gem and how you could use it. It’s kind of uncanny how often you’ll be stuck working on a problem and find that there is a Railscasts on the exact topic. Beginner-friendly but no substitute for getting your hands dirty.  A pro subscription costs $9 a month.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.rubytapas.com/"&gt;RubyTapas&lt;/a&gt; by Avdi Grimm.  Intermediate to Advanced level Ruby-Fu in digestable chunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.destroyallsoftware.com/screencasts"&gt;Destroy All Software&lt;/a&gt; by Gary Bernhardt.  Here you watch a master programmer at work as he focuses in on software design principles, test driven development and advanced development techniques.  Try not to be intimidated, he works really fast so pause and rewind when you need to.&lt;/p&gt;

&lt;h3 id="blogsnewsletters"&gt;Blogs/Newsletters&lt;/h3&gt;

&lt;p&gt;You should always be informed about news, tips, tricks and new features. Read articles about Ruby on Rails and play with the code samples you’ve read from these articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubyreflector.com/"&gt;The Ruby Reflector&lt;/a&gt;  Aggregates 709 blogs from the Ruby community in a social news format. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubyweekly.com/"&gt;The Ruby Weekly&lt;/a&gt; A free curated weekly roundup of ruby articles&lt;/p&gt;

&lt;p&gt;&lt;a href="http://robots.thoughtbot.com/"&gt;Giant Robots&lt;/a&gt; The blog by web development firm thoughtbot. They have contributed immensely to the Ruby on Rails and web development community, with tools like FactoryGirl, Shoulda and Paperclip.&lt;/p&gt;

&lt;h3 id="code-quizzes"&gt;Code Quizzes&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://rubyquiz.com/]"&gt;http://rubyquiz.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="books"&gt;Books&lt;/h3&gt;

&lt;p&gt;Books are great for deepening your understanding of things like the Ruby Object Model.  Like Confucius say, the most effective way to spend your time will be doing programming, writing code, and coding along while seeing how others write their code.  But don’t be afraid to hit the books in your spare time either.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://majesticseacreature.com/rbp-book/pdfs/rbp_1-0.pdf"&gt;Ruby Best Practices&lt;/a&gt; by Gregory Brown (Free Download)&lt;/p&gt;

&lt;p&gt;Eloquent Ruby by Russ Olsen&lt;/p&gt;

&lt;p&gt;The Rails 4 Way by Obie Fernandez&lt;/p&gt;

&lt;p&gt;Practical Object Oriented Design in Ruby by Sandi Metz&lt;/p&gt;

&lt;p&gt;Rails Antipatterns by Chad Pytel (CEO of thoughbot)&lt;/p&gt;

&lt;p&gt;Crafting Rails Applications by Jose Valim (major rails contributor)&lt;/p&gt;

&lt;p&gt;The Elements of Style by Strunk and White&lt;/p&gt;

&lt;p&gt;Mastery by George Leonard&lt;/p&gt;

&lt;h3 id="free-3-month-subscription-to-pluralsight-for-college-students-through-microsoft"&gt;Free 3-Month Subscription To PluralSight for College Students Through Microsoft&lt;/h3&gt;

&lt;p&gt;Kind of a convoluted process, but worth it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://www.dreamspark.com/Product/Product.aspx?productid=21"&gt;Visit Dreamspark and go to Products Pluralsight&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on Get Verified&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an Account with a Valid .edu email address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify your school email address &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you should go back to the Pluralsight Products page, and be signed in with a verified student account&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on get key&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a new tab and visit this link to PluralSight’s Dreamspark offer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://pluralsight.com/training/offers?cc=Dreamspark"&gt;Paste the key that you got from DreamSpark and register a new account.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enjoy your free 3 month learning spree.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  <entry>
    <title>A Moveable Feast</title>
    <link rel="alternate" href="http://blog.url.com/blog/a-moveable-feast.html"/>
    <id>http://blog.url.com/blog/a-moveable-feast.html</id>
    <published>2013-11-27T01:56:00Z</published>
    <updated>2013-12-02T20:50:22-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="a-moveable-feast"&gt;A Moveable Feast&lt;/h1&gt;

&lt;h2 id="to-sharpen-my-design-skills-i-redesigned-the-cover-of-my-favorite-book"&gt;To sharpen my design skills I redesigned the cover of my favorite book.&lt;/h2&gt;

&lt;p&gt;I don’t like the original cover because I think that the deco styles and fonts are cheesy and overstated. I think Hemingway was more plain and simple.&lt;/p&gt;

&lt;p&gt;&lt;img src="images/4/originalcover-a292bde5.jpg" /&gt;
&lt;br /&gt;
I wrote on a fancy paper napkin to get a true scribbled look.  I gathered assets from the web and put them together in photoshop.&lt;/p&gt;

&lt;p&gt;&lt;img src="images/4/assets-5f0b0e56.jpg" /&gt;
The main tricks I learned during this project were how to play with realistic cast shadows for objects.  Here’s how to do it:&lt;/p&gt;

&lt;p&gt;&lt;img src="images/4/screenshot-7d29072f.png" /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Step 1: Make a selection containing only the object you want using the magic wand or pen tool.  Put it on its own layer. You can have photoshop automatically clean up the edges of your selection by going to Layer&amp;gt;Matting.

Step 2:  Right click on the layer of the object you want to shadow and duplicate it.

Step 3:  Set your foreground color to black and black the object out by Cmd-Shift-Del. Make it shadowy by hitting it with Filter&amp;gt;Blur&amp;gt;Gaussian blur between 3-5.

Step 4:  Distort the shadow shape into the perspective you want by hitting Cmd+T then right clicking the object and selecting Distort.  You can skew the image to make it look like it is being cast.

Step 5:  Reduce the opacity of the layer to 30-50%

Bonus: You might want to duplicate the shadow layer and add a layer mask.  You can then drag a gradient so the shadow appears softer as it gets further away.  Set both shadow layers to multiply mode.  Continue to play around, and add more guassian blur until you get the result you want.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s how the finished project came out…&lt;/p&gt;

&lt;p&gt;&lt;img src="images/4/moveable_feast-7266fd2f.jpg" /&gt;
“If you are lucky enough to have lived in Paris as a young man, then wherever you go for the rest of your life, it stays with you, for Paris is a moveable feast.”&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Middleman Delivers the Good Stuff</title>
    <link rel="alternate" href="http://blog.url.com/blog/middleman-delivers.html"/>
    <id>http://blog.url.com/blog/middleman-delivers.html</id>
    <published>2013-11-26T18:55:00Z</published>
    <updated>2013-11-26T22:22:13-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="middleman-delivers-the-goods"&gt;Middleman Delivers the Goods&lt;/h1&gt;

&lt;h2 id="middlemanhttpmiddlemanappcom-allows-me-to-greatly-simplify-my-blogging-workflow-it-gives-me-the-flexibility-to-maintain-customize-and-adapt-the-site-if-i-need-to-make-changes-it-also-gives-me-a-big-performance-boost-from-using-static-html--but-most-importantly-i-can-focus-completely-on-writing-content--if-your-blog-will-have-just-a-single-author-who-knows-how-to-code-with-exposure-to-rails-middleman-will-be-ideal-for-you"&gt;&lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; allows me to greatly simplify my blogging workflow. It gives me the flexibility to maintain, customize and adapt the site if I need to make changes. It also gives me a big performance boost from using static HTML.  But most importantly I can focus completely on writing content.  If your blog will have just a single author who knows how to code (with exposure to Rails) Middleman will be ideal for you.&lt;/h2&gt;

&lt;h3 id="writing-workflow"&gt;Writing Workflow&lt;/h3&gt;

&lt;p&gt;By using the extensions &lt;a href="http://middlemanapp.com/blogging"&gt;middleman-blog&lt;/a&gt; and &lt;a href="https://github.com/neo/middleman-gh-pages"&gt;middleman-gh-pages&lt;/a&gt; publishing an article is dead simple.&lt;/p&gt;

&lt;p&gt;I create a new article with a single command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec middleman article "Launching my blog"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This puts a file in the appropriate location with a YAML “frontmatter” to hold any data I might need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Middleman Delivers the Good Stuff
date: 2013-11-26 18:55 UTC
thumb: "images/2/logcabin_thumb.jpg"
tags: middleman, writing
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there I can focus completely on writing the content of the article.  &lt;a href="http://daringfireball.net/projects/markdown/basics"&gt;Markdown&lt;/a&gt; let’s me write the article content in a plain text format.&lt;/p&gt;

&lt;p&gt;Writing posts in Markdown is a joy: everything is much easier to read and write without worrying about formatting.  Later it gets converted automatically to HTML syntax.&lt;/p&gt;

&lt;p&gt;Finally when I call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake publish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the article will build, publish and deploy to production on the web.  That’s it.  No clumsy admin screens or WSYSIWYG editors.  Fewer moving parts.&lt;/p&gt;

&lt;p&gt;Iron Chef Morimoto wrote that “Dashi (Japanese fish stock) takes 10 minutes of active time to create and mostly requires just two ingredients:  cured bonito flakes and kelp.  But what seems simple is in fact subtle and complex.”  Using Middleman to build static sites is a similar experience.  While you will find it to be straighforward and simple, it still requires a touch of finesse under the hood.&lt;/p&gt;

&lt;h3 id="why-use-a-static-site-generator"&gt;Why use a Static Site Generator?&lt;/h3&gt;

&lt;p&gt;For simple sites that don’t require a database: less is more.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Speed:  Static HTML is very fast because the server’s only concern is serving the HTML.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security:  You can’t hack a plain HTML page&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scale: Static HTML will handle stress under load from traffic if your article finds its way to the front page of Hacker News&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="why-choose-middleman-over-jekyll"&gt;Why choose Middleman over Jekyll?&lt;/h3&gt;

&lt;p&gt;The core feature of this particular site is blogging.  But Middleman supports static sites of all types.  Jekyll is structured around the idea of “posts” which is quite limiting if you want to build different types of applications.&lt;/p&gt;

&lt;p&gt;More than that though, Middleman sticks to familiar Rails conventions.  You won’t have to learn a new workflow just to generate static sites.  And you can enjoy the benefits to programmer productivity of using a modern tool set.  Rails essentially has the core functions of a static site generator already built in to it already.  But through Middleman you cut out all of the overhead that comes with the Rails framework in order to build traditional dynamic sites.  Middleman is more powerful than Jekyll, but also covers more familiar territory.&lt;/p&gt;

&lt;p&gt;Basically, you get all the good parts that come from the front-end side of Rails.  Common layouts, reusable partials and nesting templating help to promote better code organization while cutting down on the amount of boilerplate and duplication in the code you write.  You can use the asset pipeline and turbolinks too.  As well as CoffeScript and Sass!&lt;/p&gt;

&lt;h3 id="some-setup-issues-i-ran-into"&gt;Some setup issues I ran into&lt;/h3&gt;

&lt;p&gt;I initially had some annoyances getting links to pages and assets working properly from development to deployment. Make sure you brush up on your relative and absolute paths for links.&lt;/p&gt;

&lt;p&gt;I set the following in config.rb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;activate :relative_assets

# Build-specific configuration
configure :build do
  set :relative_links, true
end
&lt;/code&gt;&lt;/pre&gt;

</content>
  </entry>
  <entry>
    <title>How to fix Common Performance and Rendering Issues with Momentum Scrolling In Hybrid iOS Applications</title>
    <link rel="alternate" href="http://blog.url.com/blog/abe-lincoln.html"/>
    <id>http://blog.url.com/blog/abe-lincoln.html</id>
    <published>2013-11-18T00:00:00Z</published>
    <updated>2015-07-13T09:35:48-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="coding-tips-from-abe-lincoln"&gt;Coding Tips From Abe Lincoln&lt;/h1&gt;

&lt;p&gt;I recently built an indexed table list view with HTML/CSS and JavaScript for a hybrid PhoneGap/Cordova application. I wanted my scrolling list to have a user experience close to the iOS Contacts application.&lt;/p&gt;

&lt;p&gt;&lt;img src="images/2/iphone-contacts-9bd9ec67.png" /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id="problems"&gt;Problems&lt;/h3&gt;

&lt;p&gt;I ran into several problems with Apple’s implementation of ‘-webkit-overflow-scrolling: touch’.&lt;/p&gt;

&lt;p&gt;1). White Flicker
After adding the CSS property ‘-webkit-overflow-scrolling’: touch in order to get smooth momentum scrolling a strange white flicker started occurring. When scrolling fast, elements of the list would seem to flicker and disappear.&lt;/p&gt;

&lt;p&gt;2). Scroll Events
The other main issue that I ran into with ‘-webkit-overflow-scrolling: touch’ is that it does not continuously fire scroll events like the standard CSS scroll properties. It only fires events on scroll start and scroll end. This made it impossible to implement sticky section headers like you see in the iOS Contacts List or other scrolling list view apps like Instagram.&lt;/p&gt;

&lt;p&gt;3). scrollTo() Responds Slowly.&lt;/p&gt;

&lt;h3 id="fixing-the-white-flicker"&gt;Fixing the White Flicker&lt;/h3&gt;
&lt;p&gt;On a scrolling list with ‘-webkit-overflow-scrolling: touch’ when child elements have position:relative and are offscreen you will experience rendering issues due to a buggy implementation by Apple after iOS 5. If you search google or stack overflow for white screen flicker while scrolling you will see that this a common issue that has been plaguing users. Fortunately iOS 8 seems to have fixed the issue. If your device target is below iOS 8 then you might still need to implement the following fix:&lt;/p&gt;

&lt;p&gt;‘-webkit-overflow-scrolling: touch’ works by inconsistently promoting elements to their own hardware accelerated layers.&lt;/p&gt;

&lt;p&gt;The fix I found is to force all elements inside the scrolling area to be hardware accelerated: this prevents inconsistencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.scrolling-container &amp;gt; * {
    -webkit-transform: translate3d(0,0,0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying the property ‘-webkit-transform: translate3d(0,0,0);’ is a technique to force some devices to use hardware acceleration on the transitions for those elements. &lt;a href="http://www.smashingmagazine.com/2012/06/21/play-with-hardware-accelerated-css"&gt;Smashing Magazine&lt;/a&gt; explains:&lt;/p&gt;

&lt;p&gt;Native applications can access the device’s graphical processing unit (GPU) to make pixels fly. Web applications, on the other hand, run in the context of the browser, which lets the software do most (if not all) of the rendering, resulting in less horsepower for transitions. But the Web has been catching up, and most browser vendors now provide graphical hardware acceleration by means of particular CSS rules.&lt;/p&gt;

&lt;p&gt;Using the GPU to render element transitions is memory intensive, so use this as sparingly as possible. We only used this hack because there was no other workaround at the time.&lt;/p&gt;

&lt;h3 id="scroll-events"&gt;Scroll Events&lt;/h3&gt;

&lt;p&gt;Before iOS 8, Apple’s mobile browser did not continuously fire scroll events: unlike standard desktop browsers, which do. This makes it impossible to execute code while the users scroll and get responsive components like parallax effects or sticky headers.&lt;/p&gt;

&lt;p&gt;The good news is the issue has finally been fixed in iOS 8 with the new WKWebView replacing the buggy UIWebView. The bad news is that WKWebView still has bugs which prevent Cordova developers from using it. Thankfully, Telerik has released a polyfill that patches WKWebView and provides a drop in replacement allowing you to use it as a plugin.&lt;/p&gt;

&lt;p&gt;Adding WKWebView to my project not only fixed the white flicker hardware issues described above, but also provided me with continuous scroll events to develop on. And wait, there’s more! WKWebView also dramatically increases render performance of scrolling elements!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/Telerik-Verified-Plugins/WKWebView"&gt;Telerik’s plugin&lt;/a&gt; and a &lt;a href="http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal"&gt;blog article explaining the situation with Scroll Events&lt;/a&gt; more in depth.&lt;/p&gt;

&lt;h3 id="scrollto"&gt;scrollTo()&lt;/h3&gt;

&lt;p&gt;I wanted to build something similar to the alphabetic index controls you see on the right hand side of the iOS Contacts list app. The problem was that when using the ‘-webkit-overflow-scrolling: touch’ the scrollable container would not scroll instantly in response to jQuery scrollTop() or the window scrollTo() methods.&lt;/p&gt;

&lt;p&gt;To get the scroll performance I needed I used Velocity.JS which is an accelerated JavaScript animation library that is much faster than jQuery in many respects. I could call Velocity’s “scroll” method on a given element with duration 0 and the scrollable container specified would instantly jump to the top of the selected element.&lt;/p&gt;

&lt;p&gt;Velocity.JS and Telerik’s WKWebView plugin are excellent examples of how web technologies continue to advance and compete with native applications. Velocity.JS and WKWebView gave me the mobile browser performance I needed to smoothly render a great experience for my users.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>About Me</title>
    <link rel="alternate" href="http://blog.url.com/blog/about.html"/>
    <id>http://blog.url.com/blog/about.html</id>
    <published>1990-09-18T00:00:00Z</published>
    <updated>2013-11-26T23:45:50-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="about-me"&gt;About Me&lt;/h1&gt;

&lt;h2 id="my-name-is-stefan-i-am-a-creative-and-curious-digital-professional-currently-i-am-based-out-of-nyc-what-keeps-me-passionate-about-programming-is-the-opportunity-to-create-things-that-can-help-make-the-lives-of-others-better"&gt;My name is Stefan. I am a creative and curious digital professional. Currently I am based out of NYC. What keeps me passionate about programming is the opportunity to create things that can help make the lives of others better.&lt;/h2&gt;

&lt;h2 id="hire-me"&gt;Hire Me&lt;/h2&gt;

&lt;p&gt;My goal is to build and deploy solid, elegant, and understandable web applications.&lt;/p&gt;

&lt;p&gt;If you like what you’re seeing, and need help with your online presence, you might be interested in hiring me to consult, develop, design, or strategize.&lt;/p&gt;

&lt;h2 id="collaborate-with-me"&gt;Collaborate With Me&lt;/h2&gt;

&lt;p&gt;I have never met another developer that I haven’t learned something from.  In fact, I’ve never met another person I haven’t learned something from.&lt;/p&gt;

&lt;p&gt;I am available to pair program, either physically in NYC or remotely via Skype, TeamViewer and Tmux.  I love getting feedback, positive or negative and refining new approaches and techniques.&lt;/p&gt;

&lt;h2 id="away-from-keyboard"&gt;Away From Keyboard&lt;/h2&gt;

&lt;p&gt;When not coding I am eating.  I love cooking and playing with my food.  Sometimes I play guitar.&lt;/p&gt;

</content>
  </entry>
</feed>
