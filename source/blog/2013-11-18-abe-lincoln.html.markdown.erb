---
title: Coding Tips From Abe Lincoln
date: 2013-11-18
thumb: "images/2/logcabin_thumb.jpg"
summary: I decided to try something zany in honor of the 150th Anniversary of the Gettysburg Address.  This is the Gettysburg Address expressed as roughly Ruby-like pseudo-code.
---

Coding Tips From Abe Lincoln
========

##I decided to try something zany in honor of the 150th Anniversary of the Gettysburg Address.  This is the [Gettysburg Address](http://www.huffingtonpost.com/huff-wires/20131119/us--gettysburg-address-text/) expressed as roughly Ruby-like pseudo-code.

Matz has said that we should write code the same way we would compose an essay. Programmers need to see themselves as proud authors. Our code should communicate to the reader.  Honest Abe knew that clear reasoning and persuasive style went hand in hand to crafting a good finished work...

<br/>

<script src="https://gist.github.com/stefanlyew/7595557.js"></script>

Abe Lincoln was a badass at using [the logical structure of language](http://www.theatlantic.com/magazine/archive/2012/02/the-words-that-remade-america/308801/). Taking apart the speech in this way shows some of the underlying patterns of thought that organize the speech and make it so compact and coherent.  Looking at our code persuasively can help us become more stylistically comfortable at crafting code that is easy for a reader to follow.

Lincoln’s tight logic and eloquent phrasing of sentences pack quite a wallop.  Look closely and it becomes clear that the Gettysburg Address is structured as a careful step-by-step solution to a hard problem.  The problem he set out to solve was uniting the nation to end the Civil War.  His 272-word speech explains his vision of a solution.  Every sentence packs a dual punch. It maximizes the ability of the reader to follow his train of thought. It also moves forward the logic of what he is trying to accomplish.

Lincoln was a great writer because he tirelessly refactored line by line and edited draft after draft.  In his spare time he enjoyed studying grammar and syntax to learn the most effective parts of the language.

At its best, clean code should follow a similar workflow.  I don’t know whether [code can be beautiful or not](http://www.codinghorror.com/blog/2008/02/code-isnt-beautiful.html): but it most certainly has the power to get the author's point across.  This is a power that we as programmers too often neglect. Most of the time we are willing to accept a first draft because “it runs”.  But great programmers write code that maximizes the chance other humans will be able to follow the context.  So the next time you are in a creative slump, clear your mind and picture yourself coding up a plan to save the Union.

<% content_for :header do %>
  <%= header_helper '../images/2/logcabin_large.jpg' %>
<% end %>
